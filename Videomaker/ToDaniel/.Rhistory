}
print.a_string <- function(a_string,...) {
Letters <- sapply(a_string, function(x) x[["Letter"]])
print(Letters,...)
cat("class: a_string", "\n", "Elements of class a_letter in string: ", length(a_string), sep = "")
}
moveVectorAssign.a_string <- function(a_string, fun = "rnorm", sd = 0.001,...) {
a_string <- lapply(a_string, moveVectorAssign, sd = sd,...)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
move.a_string <- function(a_string,...) {
a_string <- lapply(a_string, move)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
updateDist.a_string <- function(a_string) {
a_string <- lapply(a_string, updateDist)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
atDestination <- function(a_letter) {
UseMethod("atDestination", a_letter)
}
atDestination.a_string <- function(a_string) {
sum(sapply(a_string, atDestination)) == length(a_string)
}
morph <- function(x, new_letter,...) {
UseMethod("morph", x)
}
morph.a_letter <- function(x, new_letter,...) {
new.a_letter <- atomizeLetter(new_letter)
n_new <- nrow(new.a_letter[["Position"]])
n_old <- nrow(x[["Position"]])
new.a_letter <- if(n_new > n_old) {
times.old <- floor(n_new/n_old)
full.number <- times.old * n_old
n_extra <- nrow(new.a_letter[["Position"]]) %% full.number
which.exstra.from.old <- sample(1:n_old, n_extra)
new.a_letter[["Position"]][,1] <- c(rep(x[["Position"]][,1],times.old),
x[["Position"]][which.exstra.from.old,1])
new.a_letter[["Position"]][,2] <- c(rep(x[["Position"]][,2],times.old),
x[["Position"]][which.exstra.from.old,2])
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
} else { if(n_new < n_old) {
times.new <- floor(n_old/n_new)
full.number <- times.new * n_new
n_extra <- n_old %% full.number
which.exstra.from.new <- sample(1:n_new, n_extra)
new.letter.temp <- x
new.letter.temp[["Home"]] <- do.call(rbind, lapply(1:(times.new + 1), function(n) {
if(n < (times.new + 1)) {
new.letter.temp[["Home"]][((n-1)*n_new + 1):(n*n_new),] <- new.a_letter[["Home"]]
} else {
new.letter.temp[["Home"]][((n-1)*n_new + 1):((n-1)*n_new + n_extra),] <- new.a_letter[["Home"]][which.exstra.from.new,]
}
}
))
new.letter.temp[["Position"]] <- new.letter.temp[["Position"]][order(sample(1:n_old, n_old)),]
new.letter.temp[["Letter"]] <- new_letter
#class(new.letter.temp) <- append(class(new.letter.temp), "a_letter")
new.letter.temp
} else {
new.a_letter[["Position"]] <- x[["Position"]]
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#new.a_letter[["Letter"]] <- new_letter
new.a_letter
}
}
class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
}
morph.a_string <- function(x, new_string,...) {
if(!("a_string" %in% class(new_string))) {
new.a_string <- atomizeString(new_string)
} else {
new.a_string <- new_string
}
pos_new <- do.call(rbind, lapply(new.a_string, function(a_letter) a_letter[["Position"]]))
pos_old <- do.call(rbind, lapply(x, function(a_letter) a_letter[["Position"]]))
n_new <- nrow(pos_new)
n_old <- nrow(pos_old)
new.a_string <- if(n_new > n_old) {
times.old <- floor(n_new/n_old)
full.number <- times.old * n_old
n_extra <- n_new %% full.number
which.exstra.from.old <- sample(1:n_old, n_extra)
pos_new[,1] <- c(rep(pos_old[,1],times.old),
pos_old[which.exstra.from.old,1])
pos_new[,2] <- c(rep(pos_old[,2],times.old),
pos_old[which.exstra.from.old,2])
pos_new <- pos_new[order(sample(1:n_new, n_new)),]
n_indi_new <- sapply(new.a_string, function(x) nrow(x[["Position"]]))
index <- sapply(seq_along(n_indi_new), function(x) sum(n_indi_new[x >= seq_along(n_indi_new)]))
new.postitions <- lapply(seq_along(index), function(n) {
if(n == 1) {
pos_new[1:index[n],]
} else {
pos_new[((index[n-1])+1):index[n],]
}
})
lapply(seq_along(new.a_string), function(n) {
new.a_string[[n]][["Position"]] <- new.postitions[[n]]
class(new.a_string[[n]]) <- append(class(new.a_string[[n]]), "a_letter")
new.a_string[[n]]
})
} else { if(n_new < n_old) {
new.pos.numbers <- sapply(new.a_string, function(x) nrow(x[["Position"]]))
new.pos.distribution <- new.pos.numbers/sum(new.pos.numbers)
distribution.from.old <- floor(n_old * new.pos.distribution)
rest <- n_old - sum(distribution.from.old)
times.new <- floor(distribution.from.old/new.pos.numbers)
full.numbers <- times.new * new.pos.numbers
n_extras <- distribution.from.old %% full.numbers
n_extras[1] <- n_extras[1] + rest
which.extras.from.new <- lapply(seq_along(n_extras), function(n) sample(1:new.pos.numbers[n], n_extras[n]))
new.temp.letters.home <- lapply(seq_along(distribution.from.old),
function(x) {
do.call(rbind, lapply(1:(times.new[x] + 1), function(n) {
new.home.mat <- matrix(nrow = full.numbers[x] + n_extras[x], ncol = 2)
if(n < (times.new[x] + 1)) {
new.home.mat[((n-1)*new.pos.numbers[x] + 1):(n*new.pos.numbers[x]),] <- new.a_string[[x]][["Home"]]
} else {
new.home.mat[((n-1)*new.pos.numbers[x] + 1):((n-1)*new.pos.numbers[x] + n_extras[x]),] <- new.a_string[[x]][["Home"]][which.extras.from.new[[x]],]
}
}
))
})
pos_old <- pos_old[order(sample(1:n_old, n_old)),]
new.temp.letters.pos <- lapply(seq_along(distribution.from.old), function(x) {
index_x <- full.numbers[x] + n_extras[x]
index_x_1 <- full.numbers[x-1] + n_extras[x-1]
if(x == 1) {
pos_old[1:(index_x),]
} else {
pos_old[(index_x_1+1):(index_x_1 + index_x),]
}
})
new.temp.string <- lapply(seq_along(new.temp.letters.home), function(x) {
a_letter.temp <- list(Letter = new.a_string[[x]][["Letter"]],
RelPos_x = new.a_string[[x]][["RelPos_x"]],
RelPos_y = new.a_string[[x]][["RelPos_y"]],
Position = new.temp.letters.pos[[x]],
Destination = matrix(rep(c(0,0), (full.numbers[x] + n_extras[x])), ncol = 2),
Dist = matrix(rep(c(0,0), (full.numbers[x] + n_extras[x])), ncol = 2),
atDest = rep(T, (full.numbers[x] + n_extras[x])),
MovementVector = matrix(rep(c(0,0), (full.numbers[x] + n_extras[x])), ncol = 2),
MoveDuration = rep(0, (full.numbers[x] + n_extras[x])),
MoveSpeed = rep(0.05, (full.numbers[x] + n_extras[x])),
Suspend = rep(0, (full.numbers[x] + n_extras[x])),
Home = new.temp.letters.home[[x]],
MovementVectorName = "c(0,0)")
class(a_letter.temp) <- append(class(a_letter.temp), "a_letter")
a_letter.temp
})
#class(new.letter.temp) <- append(class(new.letter.temp), "a_letter")
new.temp.string
}
}
class(new.a_string) <- append(class(new.a_string), "a_string")
new.a_string
}
returnHome <- function(a_letter, duration,...) {
UseMethod("returnHome", a_letter)
}
returnHome.a_letter <- function(a_letter, duration = 10) {
a_letter[["Destination"]] <- a_letter[["Home"]]
dist <- a_letter[["Destination"]] - a_letter[["Position"]]
a_letter[["MoveSpeed"]] <- 1/duration
a_letter[["MovementVector"]] <- dist * a_letter[["MoveSpeed"]]
n <- nrow(a_letter[["Position"]])
one_to_n <- 1:n
iteration <- 0
while(sum(a_letter[["MovementVector"]][,1] == 0) != n
& sum(a_letter[["MovementVector"]][,2] == 0) != n) {
a_letter <- move(a_letter)
a_letter[["MovementVector"]] <- t(sapply(one_to_n, function(i) {
if(a_letter[["Position"]][i,1] < a_letter[["Destination"]][i,1] + 0.00001 &
a_letter[["Position"]][i,1] > a_letter[["Destination"]][i,1] - 0.00001 &
a_letter[["Position"]][i,2] < a_letter[["Destination"]][i,2] + 0.00001 &
a_letter[["Position"]][i,2] > a_letter[["Destination"]][i,2] - 0.00001) {
a_letter[["MovementVector"]][i,] <- c(0,0)
} else {
a_letter[["MovementVector"]][i,] <- a_letter[["MovementVector"]][i,]
}
}
))
plot(a_letter)
iteration <- iteration + 1
}
a_letter
}
returnHome.a_string <- function(a_string,
Suspend = NA,
Duration = "simpleDurationAssign",...) {
n <- sum(sapply(a_string, function(a_letter) nrow(a_letter[["Position"]])))
Duration <- eval(call("simpleDurationAssign", a_string = a_string))
a_string <- lapply(a_string, function(a_letter) {
n_dur <- which(lapply(a_string, function(x) x[["RelPos_x"]]) == a_letter[["RelPos_x"]])
a_letter[["Destination"]] <- a_letter[["Home"]]
a_letter[["atDest"]] <- rep(F, nrow(a_letter[["Position"]]))
a_letter[["Dist"]] <- a_letter[["Destination"]] - a_letter[["Position"]]
a_letter[["MoveSpeed"]] <- 1/Duration[[n_dur]]
#a_letter[["Suspend"]] <- Suspend[[n_dur]]
#a_letter[["MovementVector"]] <- dist * a_letter[["MoveSpeed"]]
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
})
class(a_string) <- append(class(a_string), "a_string")
iteration <- 0
while(!atDestination(a_string))
{
a_string <- lapply(a_string, function(a_letter) {
one_to_n <- 1:nrow(a_letter[["Position"]])
a_letter[["atDest"]] <- sapply(one_to_n, function(i) {
if(a_letter[["Position"]][i,1] < a_letter[["Destination"]][i,1] + 0.00001 &
a_letter[["Position"]][i,1] > a_letter[["Destination"]][i,1] - 0.00001 &
a_letter[["Position"]][i,2] < a_letter[["Destination"]][i,2] + 0.00001 &
a_letter[["Position"]][i,2] > a_letter[["Destination"]][i,2] - 0.00001) {
a_letter[["atDest"]][i] <- T
} else {
a_letter[["atDest"]][i] <- F
}
})
a_letter[["MovementVector"]] <- t(sapply(one_to_n, function(i) {
#if(a_letter[["Suspend"]][i] < iteration) {
if(!a_letter[["atDest"]][i]) {
a_letter[["MovementVector"]][i,] <- a_letter[["Dist"]][i,] * a_letter[["MoveSpeed"]][i]
} else {
a_letter[["MovementVector"]][i,] <- c(0,0)
}
#} else {
#        a_letter[["MovementVector"]][i,] <- c(0,0)
#}
}))
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
})
class(a_string) <- append(class(a_string), "a_string")
a_string <- move(a_string)
plot(a_string,...)
iteration <- iteration + 1
}
a_string
}
HELLOWORLD <- atomizeString("HELLOWORLD")
HELLOCHRIS <- morph(HELLOWORLD, "HELLOCHIRS")
HELLOCHRIS <- returnHome(HELLOCHRIS)
Smiley <- morph(HELLOCHRIS, "P"),
returnHome(Smiley)
simpleDurationAssign <- function(a_string, SampleVect = list(5:15)) {
x = lapply(SampleVect, enquote)
size = lapply(a_string, function(x) nrow(x[["Position"]]))
mapply(FUN = function(x, size, replace = T) {sample(x = eval(x), size = size, replace = replace)},
x = x,
size = size)
}
simpleSuspendAssign <- function(a_string, MeanVect = list(20), SdVect = list(5)) {
mean = lapply(MeanVect, enquote)
sd = lapply(SdVect, enquote)
n = lapply(a_string, function(x) nrow(x[["Position"]]))
mapply(FUN = function(n, mean, sd) { abs(round(rnorm(n = n,
mean = eval(mean),
sd = eval(sd))))},
n = n,
mean = mean,
sd = sd)
}
HELLOWORLD <- atomizeString("HELLOWORLD")
HELLOCHRIS <- morph(HELLOWORLD, "HELLOCHIRS")
HELLOCHRIS <- returnHome(HELLOCHRIS)
Smiley <- morph(HELLOCHRIS, "P"),
returnHome(Smiley)
Smiley <- morph(HELLOCHRIS, "P")
returnHome(Smiley)
Smiley
Smiley[[1]]
Smiley <- morph(HELLOCHRIS, "PL")
returnHome(Smiley)
returnHome <- function(a_letter, duration,...) {
UseMethod("returnHome", a_letter)
}
returnHome.a_letter <- function(a_letter, duration = 10) {
a_letter[["Destination"]] <- a_letter[["Home"]]
dist <- a_letter[["Destination"]] - a_letter[["Position"]]
a_letter[["MoveSpeed"]] <- 1/duration
a_letter[["MovementVector"]] <- dist * a_letter[["MoveSpeed"]]
n <- nrow(a_letter[["Position"]])
one_to_n <- 1:n
iteration <- 0
while(sum(a_letter[["MovementVector"]][,1] == 0) != n
& sum(a_letter[["MovementVector"]][,2] == 0) != n) {
a_letter <- move(a_letter)
a_letter[["MovementVector"]] <- t(sapply(one_to_n, function(i) {
if(a_letter[["Position"]][i,1] < a_letter[["Destination"]][i,1] + 0.00001 &
a_letter[["Position"]][i,1] > a_letter[["Destination"]][i,1] - 0.00001 &
a_letter[["Position"]][i,2] < a_letter[["Destination"]][i,2] + 0.00001 &
a_letter[["Position"]][i,2] > a_letter[["Destination"]][i,2] - 0.00001) {
a_letter[["MovementVector"]][i,] <- c(0,0)
} else {
a_letter[["MovementVector"]][i,] <- a_letter[["MovementVector"]][i,]
}
}
))
plot(a_letter)
iteration <- iteration + 1
}
a_letter
}
returnHome.a_string <- function(a_string,
Suspend = NA,
Duration = "simpleDurationAssign",...) {
n <- sum(sapply(a_string, function(a_letter) nrow(a_letter[["Position"]])))
Duration <- eval(call("simpleDurationAssign", a_string = a_string))
a_string <- lapply(a_string, function(a_letter) {
n_dur <- which(lapply(a_string, function(x) x[["RelPos_x"]]) == a_letter[["RelPos_x"]])
a_letter[["Destination"]] <- a_letter[["Home"]]
a_letter[["atDest"]] <- rep(F, nrow(a_letter[["Position"]]))
a_letter[["Dist"]] <- a_letter[["Destination"]] - a_letter[["Position"]]
a_letter[["MoveSpeed"]] <- 1/Duration[[n_dur]]
#a_letter[["Suspend"]] <- Suspend[[n_dur]]
#a_letter[["MovementVector"]] <- dist * a_letter[["MoveSpeed"]]
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
})
class(a_string) <- append(class(a_string), "a_string")
iteration <- 0
while(!atDestination(a_string))
{
a_string <- lapply(a_string, function(a_letter) {
one_to_n <- 1:nrow(a_letter[["Position"]])
a_letter[["atDest"]] <- sapply(one_to_n, function(i) {
if(a_letter[["Position"]][i,1] < a_letter[["Destination"]][i,1] + 0.00001 &
a_letter[["Position"]][i,1] > a_letter[["Destination"]][i,1] - 0.00001 &
a_letter[["Position"]][i,2] < a_letter[["Destination"]][i,2] + 0.00001 &
a_letter[["Position"]][i,2] > a_letter[["Destination"]][i,2] - 0.00001) {
a_letter[["atDest"]][i] <- T
} else {
a_letter[["atDest"]][i] <- F
}
})
a_letter[["MovementVector"]] <- t(sapply(one_to_n, function(i) {
#if(a_letter[["Suspend"]][i] < iteration) {
if(!a_letter[["atDest"]][i]) {
a_letter[["MovementVector"]][i,] <- a_letter[["Dist"]][i,] * a_letter[["MoveSpeed"]][i]
} else {
a_letter[["MovementVector"]][i,] <- c(0,0)
}
#} else {
#        a_letter[["MovementVector"]][i,] <- c(0,0)
#}
}))
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
})
class(a_string) <- append(class(a_string), "a_string")
a_string <- move(a_string)
dev.hold()
plot(a_string,...)
ani.pause()
iteration <- iteration + 1
}
a_string
}
dir.create("ChrisDemo")
setwd("ChristDemo")
#HELLOWORLD <- atomizeString("HELLOWORLD")
#plot(HELLOWORLD)
#HELLOCHRIS <- morph(HELLOWORLD, "HELLOCHRIS")
#HELLOCHRIS <- returnHome(HELLOCHRIS)
#Smiley <- morph(HELLOCHRIS, "PL")
#returnHome(Smiley)
saveHTML({
ani.options(interval = 0.05, nmax = 50)
par(mar = c(3, 3, 2, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3, cex.axis = 0.8,
cex.lab = 0.8, cex.main = 1)
HELLOWORLD <- atomizeString("HELLOWORLD")
plot(HELLOWORLD)
HELLOCHRIS <- morph(HELLOWORLD, "HELLOCHRIS")
HELLOCHRIS <- returnHome(HELLOCHRIS)
Smiley <- morph(HELLOCHRIS, "PL")
returnHome(Smiley)},
img.name = "ChrisDemo",
title = "Demonstration the power of Dots",
description = c("Lets Melt some letters")
)
setwd("H:/OOP_R/Videomaker")
setwd("Functions")
functions <- list.files()
lapply(functions, function(x) source(x))
setwd("..")
dir.create("ToDaniel")
setwd("ToDaniel")
HAVNEN <- atomizeString("HAVNEN")
plot(HAVNEN)
saveHTML({
par(mar = c(1, 1, 1, 1))
ani.options(interval = 0.05, nmax = 200, ani.width = 800, ani.height = 800)
HEY <- atomizeString("HEY")
for(i in 1:20) {
dev.hold()
plot(HEY, xlim = c(-2,2), ylim = c(-1.5,2.5))
ani.pause()
}
DANIEL <- morph(HEY, "DANIEL")
DANIEL <- returnHome(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
for(i in 1:20) {
dev.hold()
plot(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
ani.pause()
}
Smiles <- morph(DANIEL, "[Smiley1][Smiley1]")
returnHome(Smiles, xlim = c(-3,3), ylim = c(-1.5,2.5))
ER <- morph(Smiles, "ER")
ER <- returnHome(ER, xlim = c(-3,3), ylim = c(-1.5,2.5))
DU <- morph(ER, "DU")
DU <- returnHome(DU, xlim = c(-3,3), ylim = c(-1.5,2.5))
FRA <- morph(FRA, "ER"))
FRA <- returnHome(FRA, xlim = c(-3,3), ylim = c(-1.5,2.5))
HAVNEN <- morph(FRA, "HAVNEN"))
HAVNEN <- returnHome(HAVNEN, xlim = c(-3,3), ylim = c(-1.5,2.5))
}, img.name = "TEST", htmlfile = "index.html", navigator = FALSE)
rm(HAVNEN)
saveHTML({
par(mar = c(1, 1, 1, 1))
ani.options(interval = 0.05, nmax = 200, ani.width = 800, ani.height = 800)
HEY <- atomizeString("HEY")
for(i in 1:20) {
dev.hold()
plot(HEY, xlim = c(-2,2), ylim = c(-1.5,2.5))
ani.pause()
}
DANIEL <- morph(HEY, "DANIEL")
DANIEL <- returnHome(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
for(i in 1:20) {
dev.hold()
plot(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
ani.pause()
}
Smiles <- morph(DANIEL, "[Smiley1][Smiley1]")
returnHome(Smiles, xlim = c(-3,3), ylim = c(-1.5,2.5))
ER <- morph(Smiles, "ER")
ER <- returnHome(ER, xlim = c(-3,3), ylim = c(-1.5,2.5))
DU <- morph(ER, "DU")
DU <- returnHome(DU, xlim = c(-3,3), ylim = c(-1.5,2.5))
FRA <- morph(ER, "FRA")
FRA <- returnHome(FRA, xlim = c(-3,3), ylim = c(-1.5,2.5))
HAVNEN <- morph(FRA, "HAVNEN"))
HAVNEN <- returnHome(HAVNEN, xlim = c(-3,3), ylim = c(-1.5,2.5))
}, img.name = "TEST", htmlfile = "index.html", navigator = FALSE)
saveHTML({
par(mar = c(1, 1, 1, 1))
ani.options(interval = 0.05, nmax = 200, ani.width = 800, ani.height = 800)
HEY <- atomizeString("HEY")
for(i in 1:20) {
dev.hold()
plot(HEY, xlim = c(-2,2), ylim = c(-1.5,2.5))
ani.pause()
}
DANIEL <- morph(HEY, "DANIEL")
DANIEL <- returnHome(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
for(i in 1:20) {
dev.hold()
plot(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
ani.pause()
}
Smiles <- morph(DANIEL, "[Smiley1][Smiley1]")
returnHome(Smiles, xlim = c(-3,3), ylim = c(-1.5,2.5))
ER <- morph(Smiles, "ER")
ER <- returnHome(ER, xlim = c(-3,3), ylim = c(-1.5,2.5))
DU <- morph(ER, "DU")
DU <- returnHome(DU, xlim = c(-3,3), ylim = c(-1.5,2.5))
FRA <- morph(ER, "FRA")
FRA <- returnHome(FRA, xlim = c(-3,3), ylim = c(-1.5,2.5))
HAVNEN <- morph(FRA, "HAVNEN")
HAVNEN <- returnHome(HAVNEN, xlim = c(-3,3), ylim = c(-1.5,2.5))
}, img.name = "TEST", htmlfile = "index.html", navigator = FALSE)
library(animation)
saveHTML({
par(mar = c(1, 1, 1, 1))
ani.options(interval = 0.05, nmax = 200, ani.width = 800, ani.height = 800)
HEY <- atomizeString("HEY")
for(i in 1:20) {
dev.hold()
plot(HEY, xlim = c(-2,2), ylim = c(-1.5,2.5))
ani.pause()
}
DANIEL <- morph(HEY, "DANIEL")
DANIEL <- returnHome(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
for(i in 1:20) {
dev.hold()
plot(DANIEL, xlim = c(-3,3), ylim = c(-1.5,2.5))
ani.pause()
}
Smiles <- morph(DANIEL, "[Smiley1][Smiley1]")
returnHome(Smiles, xlim = c(-3,3), ylim = c(-1.5,2.5))
ER <- morph(Smiles, "ER")
ER <- returnHome(ER, xlim = c(-3,3), ylim = c(-1.5,2.5))
DU <- morph(ER, "DU")
DU <- returnHome(DU, xlim = c(-3,3), ylim = c(-1.5,2.5))
FRA <- morph(ER, "FRA")
FRA <- returnHome(FRA, xlim = c(-3,3), ylim = c(-1.5,2.5))
HAVNEN <- morph(FRA, "HAVNEN")
HAVNEN <- returnHome(HAVNEN, xlim = c(-3,3), ylim = c(-1.5,2.5))
}, img.name = "TEST", htmlfile = "index.html", navigator = FALSE)
HEY <- atomizeString("HEY")
DANIEL <- morph(HEY, "DANIEL")
DANIEL <- returnHome(DANIEL, xlim = c(-2,2), ylim = c(-1.5,2.5))
Smiles <- morph(DANIEL, "[Smiley1]")
returnHome(Smiles, xlim = c(-3,3), ylim = c(-1.5,2.5))
