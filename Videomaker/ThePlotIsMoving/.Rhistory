cox.aalem
cox.aalen
library(timerge)
library(timereg)
plot(test.test.mat2$X1, (-1*test.test.mat2$X2),
pch = 46,
axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2[,2]
range(test.test.mat2[,2])
range(test.test.mat2[,3])
range(test.test.mat2[,1])
test.test.mat2[,1] <- test.test.mat[,1]/900
test.test.mat2[,2] <- test.test.mat[,2]/600
test.test.mat2[,1:2]
plot(test.test.mat2$X1, (-1*test.test.mat2$X2),
pch = 46,
axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
plot(test.test.mat2$X1, (-1*test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900
test.test.mat2[,2] <- test.test.mat[,2]/-600
plot(test.test.mat2$X1, (-1*test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900
test.test.mat2[,2] <- test.test.mat[,2]/600
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/-900
test.test.mat2[,2] <- test.test.mat[,2]/-600
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2[,1] <- test.test.mat[,1]/900
test.test.mat2[,2] <- test.test.mat[,2]/600 + 1
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900
test.test.mat2[,2] <- test.test.mat[,2]/-600 + 1
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
class(test.test.mat2)
as.matrix(test.test.mat2)
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900 - 0.5
test.test.mat2[,2] <- test.test.mat[,2]/-600 + 0.5
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900
test.test.mat2[,2] <- test.test.mat[,2]/-600 + 0.5
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
png("jazz.png", width = 900, height = 600)
plot(test.test.mat2$X1, (test.test.mat2$X2),
pch = 46,
#axes = 0,
col = test.test.mat2$X3,
xlab = "",
ylab = "")
dev.off()
list.files()
getwd()
test.test.mat2
names(test.test.mat2)
atomizeMat2String <- function(x, width, height) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position = x[,1:2],
Destination = x[,1:2],
Dist = x[,1:2] - x[,1:2],
atDest = rep(T, nrow(x[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(x[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(x[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(x[,1:2])),
MoveSpeed = rep(0.05, nrow(x[,1:2])),
Suspend = rep(0, nrow(x[,1:2])),
Home = x[,1:2],
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
}
atomizeMat2String <- function(x, width, height) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matriget(x)(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matriget(x)(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
Home = get(x)[,1:2],
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
}
atomizeMat2String(test.test.mat2)
atomizeMat2String("test.test.mat2")
atomizeMat2String <- function(x, width, height) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
Home = get(x)[,1:2],
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
}
test <- atomizeMat2String("test.test.mat2")
test[["Position"]]
tets
test
atomizeMat2String <- function(x, width, height) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
Home = get(x)[,1:2],
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
test <- atomizeMat2String("test.test.mat2")
atomizeLetter <- function(Letter,...) {
if(Letter %in% c("space", "newline")) {
a_letter <- list(Letter = Letter,
RelPos_x = 0,
RelPos_y = 0,
Position = NULL,
Destination = NULL,
Dist = NULL,
atDest = NULL,
MovementVector = NULL,
MoveDuration = NULL,
MoveSpeed = NULL,
Suspend = NULL,
Home = NULL,
MovementVectorName = "c(0,0)")
} else {
cornerdots <- cornerDots(Letter)
filledFrame <- fillFrame2(cornerdots)
a_letter <- list(Letter = Letter,
RelPos_x = 0,
RelPos_y = 0,
Position = filledFrame,
Destination = filledFrame,
Dist = filledFrame - filledFrame,
atDest = rep(T, nrow(filledFrame)),
MovementVector = matrix(rep(c(0,0), nrow(filledFrame)), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(filledFrame)), ncol = 2),
MoveDuration = rep(0, nrow(filledFrame)),
MoveSpeed = rep(0.05, nrow(filledFrame)),
Suspend = rep(0, nrow(filledFrame)),
Home = filledFrame,
MovementVectorName = "c(0,0)")
}
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
plot.a_letter <- function(a_letter, pch = 46, xlim = c(-1,1), ylim = c(-0.5,1.5),...) {
plot(a_letter[["Position"]],
axes = 0,
pch = pch,
xlim = eval(xlim),
ylim = ylim,
xlab = "",
ylab = "",...)
}
updateDist <- function(x) {
UseMethod("updateDist", x)
}
updateDist.a_letter <- function(a_letter) {
a_letter[["Dist"]] <- a_letter[["Destination"]] - a_letter[["Position"]]
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
print.a_letter <- function(a_letter,...) {
print(a_letter[["Letter"]],...)
cat("class: a_letter", "\n", "Assigned movement vector: ", a_letter[["MovementVectorName"]], sep = "")
}
atDestination <- function(a_letter) {
UseMethod("atDestination", a_letter)
}
atDestination.a_letter <- function(a_letter) {
sum(!a_letter[["atDest"]]) == 0
}
moveVectorAssign <- function(x, fun,...) {
UseMethod("moveVectorAssign", x)
}
moveVectorAssign.a_letter <- function(a_letter, fun = "rnorm", sd = sd,...) {
n <- nrow(a_letter[["Position"]])
a_letter[["MovementVectorName"]] <- fun
a_letter[["MovementVector"]][,1] <- rnorm(n = n, sd = sd,...)
a_letter[["MovementVector"]][,2] <- rnorm(n = n, sd = sd,...)
a_letter
}
move <- function(a_letter) {
UseMethod("move", a_letter)
}
move.a_letter <- function(a_letter) {
a_letter[["Position"]] <- a_letter[["Position"]] + a_letter[["MovementVector"]]
a_letter
}
morph <- function(x, new_letter,...) {
UseMethod("morph", x)
}
morph.a_letter <- function(x, new_letter,...) {
new.a_letter <- atomizeLetter(new_letter)
n_new <- nrow(new.a_letter[["Position"]])
n_old <- nrow(x[["Position"]])
new.a_letter <- if(n_new > n_old) {
times.old <- floor(n_new/n_old)
full.number <- times.old * n_old
n_extra <- nrow(new.a_letter[["Position"]]) %% full.number
which.exstra.from.old <- sample(1:n_old, n_extra)
new.a_letter[["Position"]][,1] <- c(rep(x[["Position"]][,1],times.old),
x[["Position"]][which.exstra.from.old,1])
new.a_letter[["Position"]][,2] <- c(rep(x[["Position"]][,2],times.old),
x[["Position"]][which.exstra.from.old,2])
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
} else { if(n_new < n_old) {
times.new <- floor(n_old/n_new)
full.number <- times.new * n_new
n_extra <- n_old %% full.number
which.exstra.from.new <- sample(1:n_new, n_extra)
new.letter.temp <- x
new.letter.temp[["Home"]] <- do.call(rbind, lapply(1:(times.new + 1), function(n) {
if(n < (times.new + 1)) {
new.letter.temp[["Home"]][((n-1)*n_new + 1):(n*n_new),] <- new.a_letter[["Home"]]
} else {
new.letter.temp[["Home"]][((n-1)*n_new + 1):((n-1)*n_new + n_extra),] <- new.a_letter[["Home"]][which.exstra.from.new,]
}
}
))
new.letter.temp[["Position"]] <- new.letter.temp[["Position"]][order(sample(1:n_old, n_old)),]
new.letter.temp[["Letter"]] <- new_letter
#class(new.letter.temp) <- append(class(new.letter.temp), "a_letter")
new.letter.temp
} else {
new.a_letter[["Position"]] <- x[["Position"]]
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#new.a_letter[["Letter"]] <- new_letter
new.a_letter
}
}
class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
}
test
atomizeString <- function(string) {
n <- 1:nchar(string)
a_string <- sapply(n, function(x) substr(string,x,x))
n_start <- which(a_string == "[")
n_stop <- which(a_string == "]")
for (i in seq_along(n_start)) {
a_string[n_start[i]:n_stop[i]] <- do.call(paste0, as.list(a_string[(n_start[i] + 1):(n_stop[i] - 1)]))
}
minus.rem <- c(0, (n_stop - n_start))
for (i in seq_along(n_start)) {
a_string <- a_string[-c((n_start[i] + 1 - sum(minus.rem[1:i])):(n_stop[i]-sum(minus.rem[1:i])))]
}
a_string <- lapply(a_string, atomizeLetter)
class(a_string) <- append(class(a_string), "a_string")
a_string <- updateRelPos(a_string)
a_string
}
atomizeString("M")
setwd("H:/OOP_R/Videomaker")
setwd("Functions")
functions <- list.files()
lapply(functions, function(x) source(x))
setwd("..")
atomizeString("M")
atomizeMat2String <- function(x, width, height) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
Home = get(x)[,1:2],
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
a_string <- list(a_letter)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
test <- atomizeMat2String("test.test.mat2")
test
plot(test.test.mat2)
plot(test)
plot(test, axes = 1)
test
test[,1:2]
test.test.mat2[,1:2]
plot(test.test.mat2[,1:2])
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900 - 0.5
test.test.mat2[,2] <- test.test.mat[,2]/-600 + 1
plot <- atomizeMat2String("test.test.mat2")
plto(plot)
plot(plot)
plot(plot, ylim = c(-1,1))
plot(plot, ylim = c(0,1))
plot
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome("JAZZ")
returnHome(JAZZ)
returnHome(jazz)
library(animation)
install.packages("animation")
library(animation)
returnHome(jazz)
atomizeMat2String <- function(x, width = 1, height = 1) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position[,1] = get(x)[,1] * width,
Position[,2] = get(x)[,2] * height,
Home = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
a_string <- list(a_letter)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
atomizeMat2String <- function(x, width = 1, height = 1) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position =  get(x)[,1:2],
Position[,1] = get(x)[,1] * width,
Position[,2] = get(x)[,2] * height,
Home = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
a_string <- list(a_letter)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
atomizeMat2String <- function(x, width = 1, height = 1) {
a_letter <- list(Letter = x,
RelPos_x = 0,
RelPos_y = 0,
Position =  get(x)[,1:2],
Home = get(x)[,1:2],
Destination = get(x)[,1:2],
Dist = get(x)[,1:2] - get(x)[,1:2],
atDest = rep(T, nrow(get(x)[,1:2])),
MovementVector = matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(get(x)[,1:2])), ncol = 2),
MoveDuration = rep(0, nrow(get(x)[,1:2])),
MoveSpeed = rep(0.05, nrow(get(x)[,1:2])),
Suspend = rep(0, nrow(get(x)[,1:2])),
MovementVectorName = "c(0,0)")
a_letter[["Position"]][,1] <- get(x)[,1] * width
a_letter[["Position"]][,2] <- get(x)[,2] * height
class(a_letter) <- append(class(a_letter), "a_letter")
a_string <- list(a_letter)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
plot <- atomizeMat2String("test.test.mat2", height = 4, width = 4)
plot(plot)
plot(plot, xlim = c(-4,4), ylim = c(-4,4))
plot(plot, xlim = c(-3,3), ylim = c(-2,2))
plot(plot, xlim = c(-3,3), ylim = c(-,2))
plot(plot, xlim = c(-3,3), ylim = c(-1,2))
plot(plot, xlim = c(-3,3), ylim = c(-1,3))
plot(plot, xlim = c(-3.5,3.5), ylim = c(-1,3))
plot(plot, xlim = c(-3.5,3.5), ylim = c(-1,4))
plot(plot, xlim = c(-3.5,3.5), ylim = c(0,4))
plot(plot, xlim = c(-5,5), ylim = c(0,4))
plot(plot, xlim = c(-2,2), ylim = c(0,4))
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz)
test.test.mat2
range(test.test.mat2[,2])
test.test.mat2 <- test.test.mat
test.test.mat2[,1] <- test.test.mat[,1]/900 - 0.5
test.test.mat2[,2] <- test.test.mat[,2]/-600 + 0.5
range(test.test.mat2[,2])
plot <- atomizeMat2String("test.test.mat2", height = 4, width = 4)
plot(plot)
plot(plot, xlim = c(-2,2), ylim = c(-1,1))
plot(plot, xlim = c(-2,2), ylim = c(-2,2))
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz)
plot <- atomizeMat2String("test.test.mat2", height = 4, width = 8)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz)
plot <- atomizeMat2String("test.test.mat2", height = 4, width = 12)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz)
balls <- atomizeString("IRR[space]SEVEN[newline]ELEVEN")
lapply(balls, function(x) c(x[relPos_x], x[relPos_y]))
lapply(balls, function(x) c(x[["RelPos_x"]], x[["RelPos_y"]]))
plot <- atomizeMat2String("test.test.mat2", height = 2, width = 18)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz)
plot <- atomizeMat2String("test.test.mat2", height = 2, width = 18)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz, , xlim = c(-5,5), ylim = c(-2,2))
plot <- atomizeMat2String("test.test.mat2", height = 2, width = 18)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz, , xlim = c(-6,6), ylim = c(-2,2))
plot <- atomizeMat2String("test.test.mat2", height = 2, width = 18)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz, , xlim = c(-9,9), ylim = c(-2,2))
plot <- atomizeMat2String("test.test.mat2", height = 2, width = 10)
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz, , xlim = c(-5,5), ylim = c(-2,2))
plot(atomizeString("IRR[space]SEVEN[newline]ELEVEN"), xlim = c(-5,5), ylim = c(-2,2))
plot(atomizeString("IRR[space]SEVEN[newline]ELEVEN"), xlim = c(-5,5), ylim = c(-1,2))
plot(plot, xlim = c(-5,5), ylim = c(-1,2))
plot(plot, xlim = c(-5,5), ylim = c(-1,1))
plot(atomizeString("IRR[space]SEVEN[newline]ELEVEN"), xlim = c(-5,5), ylim = c(-1,1))
plot(atomizeString("IRR[space]SEVEN[newline]ELEVEN"), xlim = c(-5,5), ylim = c(-1,2))
getwd()
dir.create("ThePlotIsMoving")
setwd("ThePlotIsMoving")
saveHTML({
par(mar = c(1, 1, 1, 1))
ani.options(interval = 0.02, nmax = 200)
plot <- atomizeMat2String("test.test.mat2", height = 2, width = 18)
for(i in 1:20) {
dev.hold()
plot(plot, xlim = c(-5,5), ylim = c(-1,2))
ani.pause()
}
jazz <- morph(plot, "IRR[space]SEVEN[newline]ELEVEN")
returnHome(jazz, xlim = c(-5,5), ylim = c(-1,2))
}, img.name = "OhNoPlotIsMoving", htmlfile = "index.html", navigator = FALSE)
