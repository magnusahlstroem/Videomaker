a_string
}
cornerDots <- function(Letter) {
result <- switch(Letter,
M = list(c(-0.8, 0),
c(-0.8,1),
c(-0.6, 1),
c(0,0.6),
c(0.6, 1),
c(0.8,1),
c(0.8, 0),
c(0.6,0),
c(0.6, 0.8),
c(0,0.4),
c(-0.6, 0.8),
c(-0.6,0),
c(-0.8, 0)),
I = list(c(-0.1, 0),
c(-0.1,1),
c(0.1, 1),
c(0.1, 0),
c(-0.1, 0)),
N = list(c(-0.6,0),
c(-0.6,1),
c(-0.2,1),
c(0.4,0.2),
c(0.4,1),
c(0.6,1),
c(0.6,0),
c(0.2,0),
c(-0.4,0.8),
c(-0.4,0),
c(-0.6,0)),
H = list(c(-0.6,0),
c(-0.6,1),
c(-0.4,1),
c(-0.4,0.6),
c(0.4,0.6),
c(0.4,1),
c(0.6,1),
c(0.6,0),
c(0.4,0),
c(0.4,0.4),
c(-0.4,0.4),
c(-0.4,0),
c(-0.6,0)))
result
}
addPointsFrame <- function(p1, p2) {
x1 = p1[1]
y1 = p1[2]
x2 = p2[1]
y2 = p2[2]
if(x1 == x2) {
diffy <- y2 - y1
a <- NA
b <- NA
N_new <- 1:abs(diffy/0.01)
new_Ys <- min(c(y1,y2)) + 0.01*c(0, N_new)
new_Xs <- rep(x1, max(N_new))
newPoints <- lapply(N_new, function(x) c(new_Xs[x], new_Ys[x]))
} else {
if(y1 == y2) {
diffx <- x2 - x1
a <- NA
b <- NA
N_new <- 1:abs(diffx/0.01)
new_Xs <- min(c(x1,x2)) + 0.01*c(0, N_new)
new_Ys <- rep(y1, max(N_new))
newPoints <- lapply(N_new, function(x) c(new_Xs[x], new_Ys[x]))
} else {
diffy <- y2 - y1
diffx <- x2 - x1
N_new <- 1:abs(diffx/0.01)
a <- diffy/diffx
b <- y2 - a * x2
new_Xs <- min(c(x1,x2)) + 0.01*c(0, N_new)
new_Ys <- round((a*new_Xs + b)*100,0)/100
newPoints <- lapply(N_new, function(x) c(new_Xs[x], new_Ys[x]))
}
}
do.call(rbind, newPoints)
}
drawFrame <- function(pointFrame) {
N_points <- 1:length(pointFrame)
pair_vector <- lapply(N_points, function(x) c(x, x+1))[-max(N_points)]
pointPairs <- lapply(pair_vector, function(x) list(pointFrame[[x[1]]], pointFrame[[x[2]]]))
points_mat <- do.call(rbind,lapply(pointPairs, function(x) addPointsFrame(x[[1]], x[[2]])))
points_mat <- points_mat[order(points_mat[,1]),]
round(points_mat, 2)
}
fillFrame <- function(frame) {
x <- frame[,1]
y <- frame[,2]
unique_Xs <- unique(x)
ylimits <- lapply(unique_Xs, function(x) c(min(frame[frame[,1] == x,2]), max(frame[frame[,1] == x,2])))
new_Ys <- lapply(ylimits, function(y) {
diffy <- y[2] - y[1]
N_new <- 1:abs(diffy/0.01)
new_Ys <- min(c(y[2],y[1])) + 0.01*c(0, N_new)
new_Ys
}
)
l_unique_Xs <- 1:length(unique_Xs)
new_Xs <- lapply(l_unique_Xs, function(t) rep(unique_Xs[t], length(new_Ys[[t]])))
newPoints <- matrix(c(unlist(new_Xs), unlist(new_Ys)), ncol = 2)
newPoints
}
atomizeLetter <- function(Letter) {
cornerdots <- cornerDots(Letter)
frame <- drawFrame(cornerdots)
a_letter <- list(Letter = Letter, home = fillFrame(frame)*10)
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
extractorFunction <- function(x) {
UseMethod("plot", x)
}
plot.a_letter <- function(x,...) {
plot(x[["home"]])
}
atomizeLetter("M")
plot(atomizeLetter("M"))
atomizeLetter <- function(Letter) {
cornerdots <- cornerDots(Letter)
frame <- drawFrame(cornerdots)
a_letter <- list(Letter = Letter, home = fillFrame(frame))
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
plot(atomizeLetter("M"))
library(animation)
setwd("C:/Magnus/Videomaker")
atomizeString <- function(string) {
n <- 1:nchar(string)
a_string <- sapply(n, function(x) substr(string,x,x))
a_string <- lapply(a_string, atomizeLetter)
n_string <- length(a_string)
one_to_ns <- 1:n_string
a_string <- lapply(one_to_ns, function(t) {
a_string[[t]][["RelPos_x"]] <- t-n_string+(n_string-1)/2
a_string[[t]][["Position"]][,1] <- a_string[[t]][["Position"]][,1] + a_string[[t]][["RelPos_x"]]
a_string[[t]][["Home"]][,1] <- a_string[[t]][["Home"]][,1] + a_string[[t]][["RelPos_x"]]
a_string[[t]]
}
)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
cornerDots <- function(Letter) {
result <- switch(Letter,
M = list(c(-0.45, 0),
c(-0.45,1),
c(-0.3, 1),
c(0,0.6),
c(0.3, 1),
c(0.45,1),
c(0.45, 0),
c(0.3,0),
c(0.3, 0.8),
c(0,0.4),
c(-0.3, 0.8),
c(-0.3,0),
c(-0.45, 0)),
I = list(c(-0.1, 0),
c(-0.1,1),
c(0.1, 1),
c(0.1, 0),
c(-0.1, 0)),
N = list(c(-0.45,0),
c(-0.45,1),
c(-0.2,1),
c(0.2,0.3),
c(0.2,1),
c(0.45,1),
c(0.45,0),
c(0.2,0),
c(-0.2,0.7),
c(-0.2,0),
c(-0.45,0)),
H = list(c(-0.45,0),
c(-0.45,1),
c(-0.3,1),
c(-0.3,0.55),
c(0.3,0.55),
c(0.3,1),
c(0.45,1),
c(0.45,0),
c(0.3,0),
c(0.3,0.45),
c(-0.3,0.45),
c(-0.3,0),
c(-0.45,0)))
result
}
addPointsFrame <- function(p1, p2) {
x1 = p1[1]
y1 = p1[2]
x2 = p2[1]
y2 = p2[2]
if(x1 == x2) {
diffy <- y2 - y1
a <- NA
b <- NA
N_new <- 1:abs(diffy/0.01)
new_Ys <- min(c(y1,y2)) + 0.01*c(0, N_new)
new_Xs <- rep(x1, max(N_new))
newPoints <- lapply(N_new, function(x) c(new_Xs[x], new_Ys[x]))
} else {
if(y1 == y2) {
diffx <- x2 - x1
a <- NA
b <- NA
N_new <- 1:abs(diffx/0.01)
new_Xs <- min(c(x1,x2)) + 0.01*c(0, N_new)
new_Ys <- rep(y1, max(N_new))
newPoints <- lapply(N_new, function(x) c(new_Xs[x], new_Ys[x]))
} else {
diffy <- y2 - y1
diffx <- x2 - x1
N_new <- 1:abs(diffx/0.01)
a <- diffy/diffx
b <- y2 - a * x2
new_Xs <- min(c(x1,x2)) + 0.01*c(0, N_new)
new_Ys <- round((a*new_Xs + b)*100,0)/100
newPoints <- lapply(N_new, function(x) c(new_Xs[x], new_Ys[x]))
}
}
do.call(rbind, newPoints)
}
drawFrame <- function(pointFrame) {
N_points <- 1:length(pointFrame)
pair_vector <- lapply(N_points, function(x) c(x, x+1))[-max(N_points)]
pointPairs <- lapply(pair_vector, function(x) list(pointFrame[[x[1]]], pointFrame[[x[2]]]))
points_mat <- do.call(rbind,lapply(pointPairs, function(x) addPointsFrame(x[[1]], x[[2]])))
points_mat <- points_mat[order(points_mat[,1]),]
round(points_mat, 2)
}
fillFrame <- function(frame) {
x <- frame[,1]
y <- frame[,2]
unique_Xs <- unique(x)
ylimits <- lapply(unique_Xs, function(x) c(min(frame[frame[,1] == x,2]), max(frame[frame[,1] == x,2])))
new_Ys <- lapply(ylimits, function(y) {
diffy <- y[2] - y[1]
N_new <- 1:abs(diffy/0.01)
new_Ys <- min(c(y[2],y[1])) + 0.01*c(0, N_new)
new_Ys
}
)
l_unique_Xs <- 1:length(unique_Xs)
new_Xs <- lapply(l_unique_Xs, function(t) rep(unique_Xs[t], length(new_Ys[[t]])))
newPoints <- matrix(c(unlist(new_Xs), unlist(new_Ys)), ncol = 2)
newPoints
}
atomizeLetter <- function(Letter,...) {
cornerdots <- cornerDots(Letter)
frame <- drawFrame(cornerdots)
a_letter <- list(Letter = Letter,
RelPos_x = 0,
RelPos_y = 0,
Position = fillFrame(frame),
Destination = fillFrame(frame),
Dist = fillFrame(frame) - fillFrame(frame),
atDest = rep(T, nrow(fillFrame(frame))),
MovementVector = matrix(rep(c(0,0), nrow(fillFrame(frame))), ncol = 2), #c(0,0), #matrix(rep(c(0,0), nrow(fillFrame(frame))), ncol = 2),
MoveDuration = rep(0, nrow(fillFrame(frame))),
MoveSpeed = rep(0.05, nrow(fillFrame(frame))),
Suspend = rep(0, nrow(fillFrame(frame))),
Home = fillFrame(frame),
MovementVectorName = "c(0,0)")
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
plot.a_letter <- function(a_letter, pch = 46, xlim = c(-1,1), ylim = c(-0.5,1.5),...) {
plot(a_letter[["Position"]],
axes = 0,
pch = pch,
xlim = eval(xlim),
ylim = ylim,
xlab = "",
ylab = "",...)
}
updateDist <- function(x) {
UseMethod("updateDist", x)
}
updateDist.a_letter <- function(a_letter) {
a_letter[["Dist"]] <- a_letter[["Destination"]] - a_letter[["Position"]]
class(a_letter) <- append(class(a_letter), "a_letter")
a_letter
}
print.a_letter <- function(a_letter,...) {
print(a_letter[["Letter"]],...)
cat("class: a_letter", "\n", "Assigned movement vector: ", a_letter[["MovementVectorName"]], sep = "")
}
atDestination <- function(a_letter) {
UseMethod("atDestination", a_letter)
}
atDestination.a_letter <- function(a_letter) {
sum(!a_letter[["atDest"]]) == 0
}
moveVectorAssign <- function(x, fun,...) {
UseMethod("moveVectorAssign", x)
}
moveVectorAssign.a_letter <- function(a_letter, fun = "rnorm", sd = sd,...) {
n <- nrow(a_letter[["Position"]])
a_letter[["MovementVectorName"]] <- fun
a_letter[["MovementVector"]][,1] <- rnorm(n = n, sd = sd,...)
a_letter[["MovementVector"]][,2] <- rnorm(n = n, sd = sd,...)
a_letter
}
move <- function(a_letter) {
UseMethod("move", a_letter)
}
move.a_letter <- function(a_letter) {
a_letter[["Position"]] <- a_letter[["Position"]] + a_letter[["MovementVector"]]
a_letter
}
morph <- function(x, new_letter,...) {
UseMethod("morph", x)
}
morph.a_letter <- function(x, new_letter,...) {
new.a_letter <- atomizeLetter(new_letter)
n_new <- nrow(new.a_letter[["Position"]])
n_old <- nrow(x[["Position"]])
new.a_letter <- if(n_new > n_old) {
times.old <- floor(n_new/n_old)
full.number <- times.old * n_old
n_extra <- nrow(new.a_letter[["Position"]]) %% full.number
which.exstra.from.old <- sample(1:n_old, n_extra)
new.a_letter[["Position"]][,1] <- c(rep(x[["Position"]][,1],times.old),
x[["Position"]][which.exstra.from.old,1])
new.a_letter[["Position"]][,2] <- c(rep(x[["Position"]][,2],times.old),
x[["Position"]][which.exstra.from.old,2])
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
} else { if(n_new < n_old) {
times.new <- floor(n_old/n_new)
full.number <- times.new * n_new
n_extra <- n_old %% full.number
which.exstra.from.new <- sample(1:n_new, n_extra)
new.letter.temp <- x
new.letter.temp[["Home"]] <- do.call(rbind, lapply(1:(times.new + 1), function(n) {
if(n < (times.new + 1)) {
new.letter.temp[["Home"]][((n-1)*n_new + 1):(n*n_new),] <- new.a_letter[["Home"]]
} else {
new.letter.temp[["Home"]][((n-1)*n_new + 1):((n-1)*n_new + n_extra),] <- new.a_letter[["Home"]][which.exstra.from.new,]
}
}
))
new.letter.temp[["Position"]] <- new.letter.temp[["Position"]][order(sample(1:n_old, n_old)),]
new.letter.temp[["Letter"]] <- new_letter
#class(new.letter.temp) <- append(class(new.letter.temp), "a_letter")
new.letter.temp
} else {
new.a_letter[["Position"]] <- x[["Position"]]
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#new.a_letter[["Letter"]] <- new_letter
new.a_letter
}
}
class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
}
plot.a_string <- function(a_string, pch = 46, xlim = quote(c(((1-n)+(n-1)/2)-0.5,((n-1)/2)+0.5)), ylim = c(-1.5,2),...) {
n <- length(a_string)
to.plot <- do.call(rbind, lapply(a_string, function(x) x[["Position"]]))
plot(to.plot,
axes = 0,
pch = pch,
xlim = eval(xlim),
ylim = ylim,
xlab = "",
ylab = "",...)
}
print.a_string <- function(a_string,...) {
Letters <- sapply(a_string, function(x) x[["Letter"]])
print(Letters,...)
cat("class: a_string", "\n", "Elements of class a_letter in string: ", length(a_string), sep = "")
}
moveVectorAssign.a_string <- function(a_string, fun = "rnorm", sd = 0.001,...) {
a_string <- lapply(a_string, moveVectorAssign, sd = sd,...)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
move.a_string <- function(a_string,...) {
a_string <- lapply(a_string, move)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
updateDist.a_string <- function(a_string) {
a_string <- lapply(a_string, updateDist)
class(a_string) <- append(class(a_string), "a_string")
a_string
}
atDestination <- function(a_letter) {
UseMethod("atDestination", a_letter)
}
atDestination.a_string <- function(a_string) {
sum(sapply(a_string, atDestination)) == length(a_string)
}
M_atomized <- atomizeLetter("M")
M_atomized
plot(M_atomized)
M_atomized <- moveVectorAssign(M_atomized, sd = 0.1)
plot(M_atomized)
M_atomized <- move(M_atomized)
plot(M_atomized)
M_atomized <- move(M_atomized)
plot(M_atomized)
returnHome(M_atomized, duration = sample(5:50, nrow(M_atomized[["Position"]]), replace = TRUE))
HIMIN <- atomizeString("HIMIN")
HIMIN[[1]][["Position"]][1:10,]
HIMIN[[1]][["Destination"]][1:10,]
HIMIN[[1]][["Dist"]][1:10,]
HIMIN[[1]][["MoveSpeed"]][1:10]
HIMIN[[1]][["MoveDuration"]][1:10]
HIMIN[[1]][["Suspend"]][1:10]
HIMIN[[1]][["atDest"]][1:10]
class(HIMIN) <- append(class(HIMIN), "a_string")
#HIMIN <- moveVectorAssign(HIMIN, sd = 0.1)
HIMIN <- move(HIMIN)
HIMIN <- updateDist(HIMIN)
plot(HIMIN)
test2[[1]][["Position"]][1:10,]
test2[[1]][["Destination"]][1:10,]
test2[[1]][["Dist"]][1:10,]
test2[[1]][["MoveSpeed"]][1:10]
test2[[1]][["MoveDuration"]][1:10]
test2[[1]][["Suspend"]][1:10]
test2[[1]][["atDest"]][1:10]
test2[[1]][["MovementVector"]][1:10,]
test2[[1]][["Home"]][1:10,]
#HIMIN <- returnHome(HIMIN)
HIMIN <- melt(HIMIN)
# <- move(HIMIN)
plot(HIMIN)
HIMIN <- updateDist(HIMIN)
round(HIMIN[[1]][["Dist"]]/0.05)[1:10,]
round(sqrt(rowSums((HIMIN[[1]][["Dist"]][1:10,])^2))/0.05)
I_atomized <- reassemble(atomizeLetter("M"), "I")
I_atomized[["Position"]][1:10,]
I_atomized[["Destination"]][1:10,]
I_atomized[["Dist"]][1:10,]
I_atomized[["MoveSpeed"]][1:10]
I_atomized[["Suspend"]][1:10]
I_atomized[["atDest"]][1:10]
I_atomized[["MovementVector"]][1:10,]
I_atomized[["Home"]][1:10]
plot(HIMIN)
HIMIN <- melt(HIMIN)
HIMIN <- returnHome(HIMIN)
HIMIN[[1]][["Position"]][1:10,]
HIMIN[[1]][["Destination"]][1:10,]
HIMIN[[1]][["Dist"]][1:10,]
HIMIN[[1]][["MoveSpeed"]][1:10]
HIMIN[[1]][["Suspend"]][1:100]
atDestination(HIMIN)
class(HIMIN) <- append(class(HIMIN), "a_string")
setwd("MeltDownDemo")
old_letter <- atomizeLetter("I")
morph.a_letter <- function(x, new_letter,...) {
new.a_letter <- atomizeLetter(new_letter)
n_new <- nrow(new.a_letter[["Position"]])
n_old <- nrow(x[["Position"]])
new.a_letter <- if(n_new > n_old) {
times.old <- floor(n_new/n_old)
full.number <- times.old * n_old
n_extra <- nrow(new.a_letter[["Position"]]) %% full.number
which.exstra.from.old <- sample(1:n_old, n_extra)
new.a_letter[["Position"]][,1] <- c(rep(x[["Position"]][,1],times.old),
x[["Position"]][which.exstra.from.old,1])
new.a_letter[["Position"]][,2] <- c(rep(x[["Position"]][,2],times.old),
x[["Position"]][which.exstra.from.old,2])
new.a_letter[["Position"]] <- new.a_letter[["Position"]][order(sample(1:n_new, n_new)),]
#class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
} else {
if(n_new < n_old) {
times.new <- floor(n_old/n_new)
full.number <- times.new * n_new
n_extra <- n_old %% full.number
which.exstra.from.new <- sample(1:n_new, n_extra)
new.letter.temp <- x
new.letter.temp[["Home"]] <- do.call(rbind, lapply(1:(times.new + 1), function(n) {
if(n < (times.new + 1)) {
new.letter.temp[["Home"]][((n-1)*n_new + 1):(n*n_new),] <- new.a_letter[["Home"]]
} else {
new.letter.temp[["Home"]][((n-1)*n_new + 1):((n-1)*n_new + n_extra),] <- new.a_letter[["Home"]][which.exstra.from.new,]
}
}
))
new.letter.temp[["Position"]] <- new.letter.temp[["Position"]][order(sample(1:n_old, n_old)),]
new.letter.temp[["Letter"]] <- new_letter
#class(new.letter.temp) <- append(class(new.letter.temp), "a_letter")
new.letter.temp
}
}
class(new.a_letter) <- append(class(new.a_letter), "a_letter")
new.a_letter
}
class(new.letter.temp) <- append(class(new.letter.temp), "a_letter")
new.letter.temp
new.letter.temp[["Position"]][1:10,]
new.letter.temp[["Destination"]][1:10,]
new.letter.temp[["Dist"]][1:10,]
new.letter.temp[["MoveSpeed"]][1:10]
new.letter.temp[["Suspend"]][1:10]
new.letter.temp[["atDest"]][1:10]
new.letter.temp[["MovementVector"]][1:10,]
new.letter.temp[["Home"]][1:10,]
