)
pointFrame = list(
c(0, 1, "cir", 0, 0.55), c(-0.45, 0.55,"l"),
c(-0.3, 0.55, "cir", 0, 0.55), c(0, 0.85, "l"),
c(0, 1)
)
pointFrame
drawFrame <- function(pointFrame) {
N_points <- 1:length(pointFrame)
pair_vector <- lapply(N_points, function(x) c(x, x+1))[-max(N_points)]
pointPairs <- lapply(pair_vector, function(x) list(pointFrame[[x[1]]], pointFrame[[x[2]]]))
points_mat <- do.call(rbind,lapply(pointPairs, function(x) addPointsFrame(x[[1]], x[[2]])))
points_mat <- points_mat[order(points_mat[,1]),]
round(points_mat, 2)
}
drawFrame(pointFrame)
plot(drawFrame(pointFrame))
fillFrame(drawFrame(pointFrame))
plot(fillFrame(drawFrame(pointFrame)))
cornerDots("O")
fillFrame2(cornerDots("O"))
plot(fillFrame2(cornerDots("O")))
fillFrame(drawFrame(addPointsFrame(cornerDots("O")[[1]])))
cornerDots("O")[[1]]
addPointsFrame(cornerDots("O")[[1]])
fillFrame(drawFrame(cornerDots("O")[[1]]))
plot(fillFrame(drawFrame(cornerDots("O")[[1]])))
v1 <- c(0, 0, "cir", 0, 0.45)
v2 <- c(0.45, 0.45,"l")
addPointsFrame(v1,v2)
p1 <- as.numeric(c(v1[1], v1[2]))
p2 <- as.numeric(c(v2[1], v2[2]))
p0 <- as.numeric(c(v1[4], v1[5]))
plot(addPoointsFrame(v1,v2))
plot(addPointsFrame(v1,v2))
v1 <- c(0.3, 0.45, "cir", 0, 0.45)
v2 <- c(0,0.15, "l")
addPointsFrame(v1,v2)
p1 <- as.numeric(c(v1[1], v1[2]))
p2 <- as.numeric(c(v2[1], v2[2]))
p0 <- as.numeric(c(v1[4], v1[5]))
p1 <- as.numeric(p1)
p0 <- as.numeric(p0)
x0 <- p0[1]
y0 <- p0[2]
x1 <- p1[1]
y1 <- p1[2]
x2 <- p2[1]
y2 <- p2[2]
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(x > 0) {
if((drawDirectionPos & y1 < y2) | (y2 < y1 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & y1 < y2) | (y2 < y1 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
warnings
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(x > 0) {
if((drawDirectionPos & y1 < y2) | (y2 < y1 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & y1 < y2) | (y2 < y1 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
warnings()
new_Ys
new_Xs
p1 <- as.numeric(p1)
p0 <- as.numeric(p0)
x0 <- p0[1]
y0 <- p0[2]
x1 <- p1[1]
y1 <- p1[2]
x2 <- p2[1]
y2 <- p2[2]
#radius <- dist(p1 = p0, p2 = p2)
#dist1 <- dist(p0, p1)
#dist2 <- dist(p0, p2)
#dist1 == dist2
diffx <- x2 - x1
diffy <- y2 - y1
drawDirectionPos <-  x2 > x1
N_new <- 0:(diffx/0.01)
if(drawDirectionPos) {
new_Xs <- min(c(x1,x2)) + 0.01*N_new
} else {
new_Xs <- max(c(x1,x2)) + 0.01*N_new
}
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(x > 0) {
if((drawDirectionPos & y1 < y2) | (y2 < y1 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & y1 < y2) | (y2 < y1 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
new_Xs
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x > 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x > 0 & y1 < y2) | (y2 < y1 & x < 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
round((-b + sqrt(d))/(2*a),2)
round((-b - sqrt(d))/(2*a),2)
new_Y <- round((-b - sqrt(d))/(2*a),2)
round((-b - sqrt(d))/(2*a),2)
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x > 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x > 0 & y1 < y2) | (y2 < y1 & x < 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x >= 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x >= 0 & y1 < y2) | (y2 < y1 & x < 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x > 0 & y1 < y2) | (y2 < y1 &  x =< 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x > 0 & y1 < y2) | (y2 < y1 & x =< 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x > 0 & y1 < y2) | (y2 < y1 &  x <= 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x > 0 & y1 < y2) | (y2 < y1 & x <= 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
v1 <- c(0, 1, "cir", 0, 0.55)
v2 <- c(-0.45, 0.55,"l")
addPointsFrame(v1,v2)
p1 <- as.numeric(c(v1[1], v1[2]))
p2 <- as.numeric(c(v2[1], v2[2]))
p0 <- as.numeric(c(v1[4], v1[5]))
diffx <- x2 - x1
diffy <- y2 - y1
drawDirectionPos <-  x2 > x1
N_new <- 0:(diffx/0.01)
if(drawDirectionPos) {
new_Xs <- min(c(x1,x2)) + 0.01*N_new
} else {
new_Xs <- max(c(x1,x2)) + 0.01*N_new
}
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x >= 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x >= 0 & y1 < y2) | (y2 < y1 & x < 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
p1 <- as.numeric(p1)
p0 <- as.numeric(p0)
x0 <- p0[1]
y0 <- p0[2]
x1 <- p1[1]
y1 <- p1[2]
x2 <- p2[1]
y2 <- p2[2]
#radius <- dist(p1 = p0, p2 = p2)
#dist1 <- dist(p0, p1)
#dist2 <- dist(p0, p2)
#dist1 == dist2
diffx <- x2 - x1
diffy <- y2 - y1
drawDirectionPos <-  x2 > x1
N_new <- 0:(diffx/0.01)
if(drawDirectionPos) {
new_Xs <- min(c(x1,x2)) + 0.01*N_new
} else {
new_Xs <- max(c(x1,x2)) + 0.01*N_new
}
ne_xs
new_xs
new_xs
new_Xs
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x >= 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x >= 0 & y1 < y2) | (y2 < y1 & x < 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x >= 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x > 0 & y1 < y2) | (y2 < y1 & x =< 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(drawDirectionPos) {
if((x >= 0 & y1 < y2) | (y2 < y1 &  x < 0)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((x > 0 & y1 < y2) | (y2 < y1 & x <= 0)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
v1 <- c(0.3, 0.45, "cir", 0, 0.45)
v2 <- c(0,0.15, "l")
addPointsFrame(v1,v2)
p1 <- as.numeric(c(v1[1], v1[2]))
p2 <- as.numeric(c(v2[1], v2[2]))
p0 <- as.numeric(c(v1[4], v1[5]))
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(y1 < y2) {
if((drawDirectionPos & x > 0) | (x < 0 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & x > 0) | (x < 0 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(y1 < y2) {
if((drawDirectionPos & x >= 0) | (x < 0 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & x >= 0) | (x < 0 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(y1 < y2) {
if((drawDirectionPos & x > 0) | (x <= 0 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & x > 0) | (x <= 0 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
new_Ys
p1
v1 <- c(0, 1, "cir", 0, 0.55)
v2 <- c(-0.45, 0.55,"l")
addPointsFrame(v1,v2)
p1 <- as.numeric(c(v1[1], v1[2]))
p2 <- as.numeric(c(v2[1], v2[2]))
p0 <- as.numeric(c(v1[4], v1[5]))
circlePoints <- function(p1, p2, p0) {
p1 <- as.numeric(p1)
p0 <- as.numeric(p0)
x0 <- p0[1]
y0 <- p0[2]
x1 <- p1[1]
y1 <- p1[2]
x2 <- p2[1]
y2 <- p2[2]
#radius <- dist(p1 = p0, p2 = p2)
#dist1 <- dist(p0, p1)
#dist2 <- dist(p0, p2)
#dist1 == dist2
diffx <- x2 - x1
diffy <- y2 - y1
drawDirectionPos <-  x2 > x1
N_new <- 0:(diffx/0.01)
if(drawDirectionPos) {
new_Xs <- min(c(x1,x2)) + 0.01*N_new
} else {
new_Xs <- max(c(x1,x2)) + 0.01*N_new
}
new_Ys <- sapply(new_Xs, function(x)  {
a <- 1
b <- - 2 * y0
c <- y0^2 + (x-x0)^2 - (x1 - x0)^2 - (y1 - y0)^2
d <- round((b^2 - 4 * a * c), 4)
if(y1 < y2) {
if((drawDirectionPos & x > 0) | (x <= 0 & !drawDirectionPos)) {
new_Y <- round((-b - sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b + sqrt(d))/(2*a),2)
}
} else {
if((drawDirectionPos & x > 0) | (x <= 0 & !drawDirectionPos)) {
new_Y <- round((-b + sqrt(d))/(2*a),2)
} else {
new_Y <- round((-b - sqrt(d))/(2*a),2)
}
}
})
newPoints <- mapply(FUN = function(x,y) c(x,y), x = new_Xs, y = new_Ys, SIMPLIFY = F)
newPoints
}
fillFrame2(cornerDots("O"))
plot(fillFrame2(cornerDots("O")))
setwd("C:/Magnus/Videomaker")
setwd("Functions")
functions <- list.files()
lapply(functions, function(x) source(x))
setwd("..")
dir.create("ChrisDemo")
setwd("ChrisDemo")
saveHTML({
ani.options(interval = 0.05, nmax = 50)
par(mar = c(3, 3, 2, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3, cex.axis = 0.8,
cex.lab = 0.8, cex.main = 1)
HELLOWORLD <- atomizeString("HELLOWORLD")
plot(HELLOWORLD)
ani.pause(1)
HELLOCHRIS <- morph(HELLOWORLD, "HELLOCHRIS")
HELLOCHRIS <- returnHome(HELLOCHRIS)
Smiley <- morph(HELLOCHRIS, "PL")
returnHome(Smiley)},
img.name = "ChrisDemo",
title = "Demonstration the power of Dots",
description = c("Lets Melt some letters")
)
library(animation)
saveHTML({
ani.options(interval = 0.05, nmax = 50)
par(mar = c(3, 3, 2, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3, cex.axis = 0.8,
cex.lab = 0.8, cex.main = 1)
HELLOWORLD <- atomizeString("HELLOWORLD")
plot(HELLOWORLD)
ani.pause(1)
HELLOCHRIS <- morph(HELLOWORLD, "HELLOCHRIS")
HELLOCHRIS <- returnHome(HELLOCHRIS)
Smiley <- morph(HELLOCHRIS, "PL")
returnHome(Smiley)},
img.name = "ChrisDemo",
title = "Demonstration the power of Dots",
description = c("Lets Melt some letters")
)
